name: 'publish'

on:
  push:
    branches:
      - master

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # - platform: 'macos-latest' # for Arm based macs (M1 and above).
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'
          # - platform: 'ubuntu-20.04' # for x86_64 linux
          #   args: ''
          # - platform: 'ubuntu-20.04' # for ARMv7 linux
          #   args: '--target armv7-unknown-linux-gnueabihf'
          - platform: 'ubuntu-20.04' # for ARM64 linux
            args: '--target aarch64-unknown-linux-gnu'
          # - platform: 'windows-latest'
          #   args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.args == '--target aarch64-unknown-linux-gnu' && 'aarch64-unknown-linux-gnu' || '' }}

      - name: install dependencies (ubuntu x86 only)
        if: matrix.platform == 'ubuntu-20.04' && matrix.args == '' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install dependencies (ubuntu ARM64 only)
        if: matrix.platform == 'ubuntu-20.04' && matrix.args == '--target aarch64-unknown-linux-gnu' # This must match the platform value defined above.
        run: |
          sudo echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal main restricted \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates main restricted \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal universe \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates universe \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal multiverse \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-updates multiverse \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-backports main restricted universe multiverse \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-security main restricted \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-security universe \
          deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports focal-security multiverse" >> /etc/apt/sources.list
          sudo apt-get update
          sudo apt install gcc-aarch64-linux-gnu
          sudo dpkg --add-architecture arm64
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt install libwebkit2gtk-4.0-dev:arm64 libappindicator3-dev:arm64 librsvg2-dev:arm64 patchelf:arm64 libssl-dev:arm64
          export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
          
      - name: install frontend dependencies
        run: npm install # change this to npm or pnpm depending on which one you use

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'Amica v__VERSION__'
          releaseBody: |
            # Amica __VERSION__
            ## Download Notes
            * `_aarch64.dmg` is for **macOS M1**
            * `_aarch64.app.tar.gz` is for **macOS M1**
            * `_x64.dmg` is for **macOS x86**
            * `_x64.app.tar.gz` is for **macOS x86**
            * `.exe` is for **Windows**
            * `.msi` is for **Windows**
            * `.AppImage` is for any **Linux 64 bit**
            * `_arm.AppImage` is for any **Linux ARMv7**
            * `_aarch64.AppImage` is for any **Linux ARM64 (AArch64)**
            * * **Note**: Be sure to set this to executable to run it (`chmod +x`)
            * `.deb` is for Debian (or Ubuntu) distributions
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
